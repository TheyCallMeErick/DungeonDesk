// <auto-generated />
using System;
using DungeonDeskBackend.Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DungeonDeskBackend.Application.Migrations
{
    [DbContext(typeof(DungeonDeskDbContext))]
    partial class DungeonDeskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdventureSheetFieldValidationsAdventureSheetTemplateField", b =>
                {
                    b.Property<Guid>("AdventureSheetFieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValidationsId")
                        .HasColumnType("uuid");

                    b.HasKey("AdventureSheetFieldsId", "ValidationsId");

                    b.HasIndex("ValidationsId");

                    b.ToTable("AdventureSheetFieldValidationsAdventureSheetTemplateField");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetFieldOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdventureSheetFieldOptions");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetFieldValidations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AdventureSheetFieldValidations");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureSheetTemplateFieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SheetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSheetTemplateFieldId");

                    b.HasIndex("SheetId");

                    b.ToTable("AdventureSheetFields");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureSheetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSheetId");

                    b.ToTable("AdventureSheetInventories", (string)null);
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("AdventureSheetTemplates", (string)null);
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetTemplateField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdventureSheetFieldOptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureSheetTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSheetFieldOptionsId");

                    b.HasIndex("AdventureSheetTemplateId");

                    b.ToTable("AdventureSheetTemplateFields", (string)null);
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Chronicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SessionId");

                    b.ToTable("Chronicles");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Desk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdventureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("Desks");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureSheetInventoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSheetInventoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("InventoryItem");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.PlayerDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActiveSheetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerDesks");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReplacedByTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeskId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Sheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdventureSheetTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PlayerDeskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSheetTemplateId");

                    b.HasIndex("PlayerDeskId")
                        .IsUnique();

                    b.ToTable("Sheets");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProfilePictureFileName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdventureSheetFieldValidationsAdventureSheetTemplateField", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetTemplateField", null)
                        .WithMany()
                        .HasForeignKey("AdventureSheetFieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetFieldValidations", null)
                        .WithMany()
                        .HasForeignKey("ValidationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AdventureSheetFieldValidationsAdventureSheetTemplateField_~1");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Adventure", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Player", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetFieldValue", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetTemplateField", "AdventureSheetTemplateField")
                        .WithMany()
                        .HasForeignKey("AdventureSheetTemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.Sheet", "Sheet")
                        .WithMany("Fields")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSheetTemplateField");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetInventory", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Sheet", "AdventureSheet")
                        .WithMany()
                        .HasForeignKey("AdventureSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSheet");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetTemplate", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Adventure", "Adventure")
                        .WithMany("AdventureSheetTemplates")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetTemplateField", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetFieldOptions", null)
                        .WithMany("AdventureSheetFields")
                        .HasForeignKey("AdventureSheetFieldOptionsId");

                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetTemplate", "AdventureSheetTemplate")
                        .WithMany("Fields")
                        .HasForeignKey("AdventureSheetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSheetTemplate");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Chronicle", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Player", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.Session", "Session")
                        .WithMany("Chronicles")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Desk", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Adventure", "Adventure")
                        .WithMany("DesksUsingThis")
                        .HasForeignKey("AdventureId");

                    b.Navigation("Adventure");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.InventoryItem", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetInventory", "AdventureSheetInventory")
                        .WithMany("Items")
                        .HasForeignKey("AdventureSheetInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.Item", "Item")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSheetInventory");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.PlayerDesk", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Desk", "Desk")
                        .WithMany("PlayerDesks")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.Player", "Player")
                        .WithMany("PlayerDesks")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.RefreshToken", "ReplacedByToken")
                        .WithMany()
                        .HasForeignKey("ReplacedByTokenId");

                    b.HasOne("DungeonDeskBackend.Domain.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedByToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Session", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Desk", "Desk")
                        .WithMany("Sessions")
                        .HasForeignKey("DeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desk");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Sheet", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.AdventureSheetTemplate", "AdventureSheetTemplate")
                        .WithMany("Sheets")
                        .HasForeignKey("AdventureSheetTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonDeskBackend.Domain.Models.PlayerDesk", "PlayerDesk")
                        .WithOne("ActiveSheet")
                        .HasForeignKey("DungeonDeskBackend.Domain.Models.Sheet", "PlayerDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSheetTemplate");

                    b.Navigation("PlayerDesk");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.User", b =>
                {
                    b.HasOne("DungeonDeskBackend.Domain.Models.Player", "Player")
                        .WithOne("User")
                        .HasForeignKey("DungeonDeskBackend.Domain.Models.User", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Adventure", b =>
                {
                    b.Navigation("AdventureSheetTemplates");

                    b.Navigation("DesksUsingThis");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetFieldOptions", b =>
                {
                    b.Navigation("AdventureSheetFields");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetInventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.AdventureSheetTemplate", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Sheets");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Desk", b =>
                {
                    b.Navigation("PlayerDesks");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Item", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Player", b =>
                {
                    b.Navigation("PlayerDesks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.PlayerDesk", b =>
                {
                    b.Navigation("ActiveSheet");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Session", b =>
                {
                    b.Navigation("Chronicles");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.Sheet", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("DungeonDeskBackend.Domain.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
